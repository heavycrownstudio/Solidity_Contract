// SPDX- License-Identifier: Unlicensed

pragma solidity ^0.8.7;

contract CryptoKids {
    //owner Dad
    address owner;

    event LogKidFundsReceived(address addr, uint amount, uint contractBalance);

    constructor() {
        owner = msg.sender;
    }

    //defines kid
    struct Kid {
        address payable walletAddress;
        string firstName;
        string lastName;
        uint releaseTime;
        uint amount;
        bool canWithdraw;
    }
    Kid[] public kids;

    modifier onlyOwner(){
        require(msg.sender == owner, "Only the owner can add kids.");
        _;
    }

    //adds kid to contract
    function addKid(address payable walletAddress, string memory firstName, string memory lastName, uint releaseTime, uint amount,  bool canWithdraw) public onlyOwner{
        kids.push(Kid(
            walletAddress,
            firstName,
            lastName,
            releaseTime,
            amount,
            canWithdraw
        ));      
    }


        function balanceOf() public view returns(uint){
            return address(this).balance;
        }

    //deposit funds to contract, kid's account
    function deposit(address walletAddress) payable public {
        addToKidsBalance(walletAddress);
    }

    function addToKidsBalance(address walletAddress) private {
        for(uint i = 0; i < kids.length;i++){
            if(kids[i].walletAddress == walletAddress){
                kids[i].amount += msg.value;
                emit LogKidFundsReceived(walletAddress, msg.value, balanceOf());
            }
        }
    }

    function getIndex(address walletAddress) view private returns(uint) {
        for(uint i = 0; i < kids.length; i++){
            if(kids[i].walletAddress == walletAddress){
                return i;
            }
        }
        return 999;
    }
    //kid checks if able to withdraw
    function availableToWithdraw(address walletAddress) public returns(bool) {
        uint i = getIndex(walletAddress);
        require(block.timestamp > kids[i].releaseTime, "You can't withdraw yet.");
        if(block.timestamp > kids[i].releaseTime) {
            kids[i].canWithdraw = true;
            return true;
        } else{
            return false;
        }
    }
    //withdraw money 
    function withdraw(address walletAddress) payable public {
        uint i = getIndex(walletAddress);
        require(msg.sender == kids[i].walletAddress, "Must be kid to withdraw.");
        require(kids[i].canWithdraw == true, "You can't withdraw right now.");
        kids[i].walletAddress.transfer(kids[i].amount);
    }
}


